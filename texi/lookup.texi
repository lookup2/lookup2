\input texinfo    @c -*- texinfo -*-
@c %**start of header
@setfilename .info
@settitle Lookup User's Manual


@c Version and Contact Info
@set AUTHOR Nishida Keisuke (Updated by KAWABATA Taichi)

@documentencoding UTF-8
@c Use proper quote and backtick for code sections in PDF output
@set txicodequoteundirected
@set txicodequotebacktick
@c
@c Version and Contact Info
@set MAINTAINERSITE @uref{http://lookup2.github.com/ webpage}
@set MAINTAINER Kawabata Taichi
@set MAINTAINEREMAIL @email{kawabata dot taichi at gmail dot com}
@c %**end of header
@finalout


@copying
@end copying


@dircategory Emacs application
@direntry
* Lookup: (lookup).             Outline-based notes management and organizer
@end direntry


@titlepage
@title Lookup User's Manual

@subtitle Release @value{VERSION}
@author Nishida Keisuke (Updated by KAWABATA Taichi)

@c The following two commands start the copyright page.
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@c Output the table of contents at the beginning.
@contents

@ifnottex
@node Top
@top Lookup User's Manual Manual
@insertcopying
@end ifnottex

@menu
* Introduction::                
* Search Agents::               
* Dictionaries::                
* Queries::                     
* Entries::                     
* Contents::                    
* Modules::                     
* List of Search Agents::       
* List of Supported Dictionaries::  
* Making new Search Agents::    
* Making new Support Files::    
* Concept index::               
* Key index::                   
* Command and function index::  
* Variable index::              

@detailmenu
 --- The Detailed Node Listing ---

Introduction

* Summary::                     
* Installation::                
* Setup::                       
* Startup::                     
* Search::                      
* View::                        

Search Agents

* Agent Options::               

Dictionaries

* Dictionary Selection Buffer::  
* Setting Dictionary Options::  
* Common Dictionary Options::   

Queries

* Query commands::              
* Query by pattern::            
* Query by word::               
* Query Filters::               

Query Filters

* Mecab::                       
* English Stemmer::             

Contents

* Contents Arrangements::       

List of Search Agents

* ndeb::                        
* ndtext::                      
* ndsary::                      
* ndbuffer::                    
* ndlatin::                     
* ndweb::                       
* ndic::                        
* ndict::                       
* ndjitsuu::                    
* ndsrd::                       
* ndest::                       
* ndmecab::                     
* ndbtonic::                    
* ndspell::                     
* ndcookie::                    

ndtext

* ndtext summary::              
* Text Dictionary Architecture::  
* Supported Options::           

ndsary

* ndtext summary::              
* ndsary options::              

ndbuffer

* ndbuffer summary::            
* ndbuffer options::            

ndjitsuu

* Summary::                     

ndbtonic

* Usage::                       

List of Supported Dictionaries

* EPWING/EBXA dictionaries::    
* Text/XML dictionaries::       

EPWING/EBXA dictionaries

* FPWBooks::                    
* EPWING for classics::         
* LDOCE5-FPW::                  

Text/XML dictionaries

* SDIC Dictionary::             
* RangJung Yeshe Dicitionary::  

@end detailmenu
@end menu




@node Introduction
@chapter Introduction

@menu
* Summary::                     
* Installation::                
* Setup::                       
* Startup::                     
* Search::                      
* View::                        
@end menu

@node Summary
@section Summary
Lookup is a unified searching tool for various internal and
external resources, especially for linguistic dictionaries.
Typical dictionaries supported by lookup include:

@itemize
@item 
Text-based dictionaries
(Use of Suffix Array tool (sary) for better performance is also supported)

@item 
EPWING dictionaries

@item 
Search Engines (Spotlight, Hyperestraier)

@item 
Web Search Engines (OpenSearch)

@item 
Spell Checking

@item 
Scanned Paper Dictionaries (index text is needed.)

@end itemize

@node Installation
@section Installation
If you clone or download the archive from github, you will have to
follow the following procedure to install Lookup program.

@verbatim
% ./configure --with-emacs=emacs
              --with-lispdir=/your/home/emacs/lisp
              --infodir=/your/home/emacs/info
% make install
@end verbatim

@node Setup
@section Setup
You will need some dictionaries that Lookup @ref{Search Agents,}
supports.  For on-line available dictionaries, see @ref{List of Supported Dictionaries,}.  When you install the dictionaries, you
need to specify @ref{Search Agents,} with their locations.  For
example:

@lisp
(setq lookup-search-agents '((ndeb "~/path/to/dict_dir_1/")
                             (ndeb "~/path/to/dict_dir_2/")))
@end lisp

Here, @code{ndeb} is a @strong{search agent}, and @code{/path/to/dict_dir_1/} is a
location of a dictionaries.  Remember that you will need @code{eblook}
program @footnote{It is included in various package managers, such as @code{MacPorts}.} to use this agent.

Additionally, you might want to set as follows, or you might just
@code{(require 'lookup)} instead of autoloading the library.

@lisp
(autoload 'lookup "lookup" nil t)
(autoload 'lookup-region "lookup" nil t)
(autoload 'lookup-word "lookup" nil t)
(autoload 'lookup-select-dictionaries "lookup" nil t)

(define-key ctl-x-map "l" 'lookup)              ; C-x l - lookup
(define-key ctl-x-map "y" 'lookup-region)       ; C-x y - lookup-region
(define-key ctl-x-map "\C-y" 'lookup-pattern)   ; C-x C-y - lookup-pattern
@end lisp

You may write your settings to
~/.emacs.d/lookup/init.el.  It is recommended to write
all lookup settings to this file, except for autoload settings and
key-binding settings.

@node Startup
@section Startup

After you set up the dictionary, type @code{M-x lookup} to start lookup.
You will typically see the following screen.

@verbatim
======== Lookup Windows ==================================================
--------------------------------------------------------------------------

Lookup (module: default)
Type `m' to select, `u' to unselect, `q' to leave, `?' for help.

% Dictionary ID                   Title                        Methods
- -------------                   -----                        -------
* ndeb:~/edicts/OXFORD/oxford     Oxford Dictionary/Thesaurus  =><.......
* ndeb:~/edicts/OXFORD/quick      Quick Tour                   .........M
* ndeb:~/edicts/OXFORD/user       User's Guide                 =><......M
* ndeb:~/edicts/OXFORD/about      About This Disc              .........M
* ndtext:~/edicts/sdic/edict.sdic EDict                        =><-......
* ndtext:~/edicts/sdic/gene.sdic  Gene95                       =><-......

---------------------------------------------------------------------------
-J:%*  Lookup: *Dictionary List*      (Select Abbrev)--L5--C0--A
---------------------------------------------------------------------------
===========================================================================
@end verbatim



This buffer is called @emph{Dictionary Selection Buffer}.  In the above
example, several dictionaries are available.  There are asterisks
(@code{*}) in front of each dictionary IDs.  These indicates that all
dictionaries will be looked up in single query.  Usually, all
dictionaries are selected at first.



This is a list of dictionaries you can lookup.  @emph{Dictionary ID}
consists of @strong{Agent ID} + "@code{:}" + @strong{agent location}.  



@emph{Titles} may be displayed with query results.  @emph{Titles} may be
changed to your preferred name via option specification.



@emph{Methods} shows which search methods are supported by each
dictionary.  For example, @code{=><.....} means that this dictionary
supports @strong{exact}, @strong{prefix} and @strong{suffix} search methods.

Help will be displayed by pressing ?.  Pressing
q buries a buffer.  These key roles are common to other
kind of buffers.

@node Search
@section Search

Try typing @code{M-x lookup-pattern} and you will be prompted for
patterns to search.  Pressing 

@verbatim
======== Lookup Windows ==================================================
--------------------------------------------------------------------------
国語辞典            @point{}テスト
英和辞典            test


--------------------------------------------------------------------------
-U:%*  Lookup: *Entry* @{*:test@} [2]      (Entry Abbrev)--L1--C20
--------------------------------------------------------------------------
テスト
[名] 1. 試験....




--------------------------------------------------------------------------
-U:%*  Lookup: *Content* @{テスト@}      (Content Abbrev)--L1--C0--
--------------------------------------------------------------------------
===========================================================================
@end verbatim

@node View
@section View

@node Search Agents
@chapter Search Agents
@emph{Search Agents} will search specific format of dictionaries in
specified @strong{location}.  For historical reason, typical search agents
has the name which begins from @code{nd} (e.g. @code{ndeb}, @code{ndict}, @code{ndtext},
etc.)

You can specify the search agents by @code{lookup-search-agents} variable.


@table @samp
@item @code{lookup-search-agents}
This variable specifies the search
agents to be used.  It is a list of @code{(class location options)}.

@end table

For example, 

@lisp
(ndtp "dserver" :port 2010 :account "user@@domain")
@end lisp

specifies that class is @code{ndtp}, location is @code{dserver} and options
are @code{:port} and @code{account}, whose values are @code{2010} and @code{user@@domain}
respectively.


@menu
* Agent Options::               
@end menu

@node Agent Options
@section Agent Options

@table @samp
@item :charsets
Charsets that dictionary supports.  Queries whose
string do not belong to specified charsets are not
searched.

@item :query-filter
See @ref{Query Filters,} for details

@item :arranges
This option will specify the @emph{additional} arrange
functions besides the default arrange functions.

@item :arrange-table
This option will specify the @emph{overriding}
arrange functions besides the default arrange
functions.

@end table

@node Dictionaries
@chapter Dictionaries
@emph{Dictionaries} are entities that explain the meaning of specified
word or pattern.  @emph{Search Agents} will look for @emph{dictionaries}, and
user can not specify them directly.


@menu
* Dictionary Selection Buffer::  
* Setting Dictionary Options::  
* Common Dictionary Options::   
@end menu

@node Dictionary Selection Buffer
@section Dictionary Selection Buffer

Dictionaries can be selected in @emph{Dictionary Selection Buffer}.
Following keys can be used in this buffer.

@table @samp
@item m(@code{lookup-select-dictionary-select})
Select
dictionary in current position.


@item M-m(@code{lookup-select-dictionary-select-all})
Select
all dictionaries in the buffer.


@item u(@code{lookup-select-dictionary-select-unselect})
Unselect
dictionary.


@item U(@code{lookup-select-dictionary-unselect-all})
Unselect
all dictionaries.

@end table

@node Setting Dictionary Options
@section Setting Dictionary Options
You can specify dictionary options in three ways.
@itemize
@item 
@code{lookup-dictionary-options-alist} variable

@item 
@code{lookup-set-dictionary-option} function

@item 
use @emph{support-files} and @code{lookup-support-autoload-alist} variable.

@end itemize

You have to specify @strong{dictionary-id} that are displayed in
@ref{Dictionary Selection Buffer,} in @code{lookup-dictionary-options-alist}.

@lisp
(setq lookup-dictionary-options-alist
      '(("ndeb:/cdrom/EIWA" ':title "英和辞典")
        ("ndeb:/cdrom/WAEI" ':title "和英辞典")))
@end lisp

Dictionaries are indirectly specified by search agents.  You may
specify dictionary options via @emph{support-files}.  If you create your
own dictionary, you may distribute @emph{support-file} to let users
search your dictionary.

@node Common Dictionary Options
@section Common Dictionary Options

Usually Agent options are inherited to dictionary options.  Because
of this, you may set @ref{Agent Options,} individually by Dictionaries.

Besides agent options, following dictionary options may be used.

@table @samp
@item :title
Dictionary title.

@end table

@node Queries
@chapter Queries
You need to query to search dictionaries for words.  


@menu
* Query commands::              
* Query by pattern::            
* Query by word::               
* Query Filters::               
@end menu

@node Query commands
@section Query commands
You can query by patterns, such as "testi*" etc.
@table @samp
@item lookup-pattern
Look-up dictionary by pattern.

@item lookup-pattern-full-screen
Likewise

@item lookup-pattern-other-frame
Likewise

@item lookup-word
Look-up dictionary by word.

@item lookup-word-full-screen
Likewise.

@item lookup-word-other-frame
Likewise.

@end table

@node Query by pattern
@section Query by pattern
When you look-up the dictionary by pattern, following patterns can
be specified.
@table @samp
@item @code{word}
search by word.  Standard method for query.

@item @code{word*}
search by prefix matching.

@item @code{*word}
search by suffix matching.

@item @code{*word*}
search by substring matching.

@item ~'word'~
search by exact matching.

@item @code{@@word}
search by keyword matching.

@end table

@node Query by word
@section Query by word
This command will look for the word around the cursor.
@itemize
@item 
lookup-word

@end itemize

@itemize
@item 
lookup-word-full-screen

@end itemize

@itemize
@item 
lookup-word-other-frame

@end itemize

@node Query Filters
@section Query Filters
@strong{Query Filters} are filters that will convert

If you have convenient morphological analyzer (word normalizer and
extractor), you can specify it to extract the appropriate word
around the point.


@menu
* Mecab::                       
* English Stemmer::             
@end menu

@node Mecab
@subsection Mecab
You may use mecab to search for agents.  Please make sure that
your dictionaries encoding (UTF-8 is strongly recommended) and
@code{lookup-mecab-coding} are the same.
You may use this For dictionary which only supports Hiragana Entries,

@node English Stemmer
@subsection English Stemmer
@emph{English stemmer} is a function to stem an English word.  It is
realized via emacs lisp program @code{stem-english.el}.

@node Entries
@chapter Entries
Once you query for the words, search agents will return @emph{entries} if
they are found.  @emph{Entries} will be displayed in @emph{Entries buffer}.

@node Contents
@chapter Contents
@emph{Contents} of entries will be displayed in @code{*Contents*} buffer.
Before they are displayed on buffer, they may be @emph{arranged}
according to @code{arrange-tables}.


@menu
* Contents Arrangements::       
@end menu

@node Contents Arrangements
@section Contents Arrangements
Arrangements are processed in the following order.
@itemize
@item 
Gaiji Replacements

@end itemize

@node Modules
@chapter Modules
@emph{Modules} are a set of dictionaries for searching.

@node List of Search Agents
@chapter List of Search Agents

@menu
* ndeb::                        
* ndtext::                      
* ndsary::                      
* ndbuffer::                    
* ndlatin::                     
* ndweb::                       
* ndic::                        
* ndict::                       
* ndjitsuu::                    
* ndsrd::                       
* ndest::                       
* ndmecab::                     
* ndbtonic::                    
* ndspell::                     
* ndcookie::                    
@end menu

@node ndeb
@section ndeb
@code{ndeb} is a search agent for EPWING/EBXA dictionaries.  You will
need @code{eblook} program to use this agent.  Typical specification of
this dictionary is as follows.  You need to add the directory where
the @code{HONMON} file exists to @code{lookup-search-agents}.
@lisp
(setq lookup-search-agents
      '(...
        (ndeb "/path/to/directory/")
        ...))
@end lisp

@node ndtext
@section ndtext

@menu
* ndtext summary::              
* Text Dictionary Architecture::  
* Supported Options::           
@end menu

@node ndtext summary
@subsection Summary
@code{ndtext} agent lets you access medium-sized (less than 10Mbyte)
text-based dictionary by `GNU grep'.  It utilizes the multi-line
search feature of GNU grep to search structured document.

@node Text Dictionary Architecture
@subsection Text Dictionary Architecture
Typical text-based dictionaries are constructed by XML some other
kind of markups.  Some dictionaries consists of single-line
entries.  XML-based dictionaries are usually tagged as 
follows:

@verbatim
<dictionary>
...
  <content>
    <code>0123</code>
    <head>free</head>
    <entry>free</entry>
    <entry>freely</entry>
    <entry>freedom</entry>
    <explanation>
      ....
    </explanation>
  </content>
 ....
 </dictionary>
@end verbatim

In the above example, each entry of XML-based dictionary file is
contained by @code{<content>} tags, and for each @code{<content>} element,
there are single @code{<code>} element and one or more @code{<entry>}
elements.

@code{<content>} tags may be new-line character if dictionary is
single-line based.  @code{<code>} and @code{<head>} entries may be identical
in some dictionaries.  In this agent, you can specify these tags
and the agent will automatically construct regular expression for
GREP program for search.

@node Supported Options
@subsection Supported Options

Following Options are supported.

@multitable {aaaaaaaaaaaaaaaa} {aaaaaaaaaaaaaaaaaaaaaaaaaaaa} {aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa}
@headitem option
@tab value
@tab note
@item :content-tags
@tab ("<content>" . "</content>")
@tab multi-line
@item 
@tab nil
@tab default: (". "")
@item 
@tab ("" . "")
@tab single-line
@item 
@tab function
@tab argument: string (:search)
@item 
@tab 
@tab code  (:content)
@item 
@tab 
@tab return: tags
@item :entry-tags-list
@tab (entry-tags entry-tags@dots{})
@tab 
@item :entry-tags
@tab ("<entry"> . "</entry>")
@tab 
@item 
@tab nil
@tab default: (nil . "")
@item 
@tab (nil . "</entry>")
@tab content-start = line beginning
@item 
@tab function
@tab argument: string (:search)
@item 
@tab 
@tab code  (:content)
@item 
@tab 
@tab return: tags
@item :head-tags
@tab ("<head>" . "</head>")
@tab 
@item 
@tab nil
@tab default: :entry-tags
@item 
@tab (nil . "</head>")
@tab head-start = line beginning
@item 
@tab function
@tab argument: content
@item 
@tab 
@tab return:   head-value
@item :code-tags
@tab ("<code>" . "</code>")
@tab 
@item 
@tab nil
@tab default: :entry-tags
@item 
@tab (nil . "</code>")
@tab code-start = line beginning
@item 
@tab function
@tab argument: string (:search)
@item 
@tab 
@tab code  (:content)
@item 
@tab 
@tab return :  tags
@item :extension
@tab ".xml"
@tab (not used in ndsary.)
@item 
@tab nil
@tab default: ".txt" is used.
@end multitable

@node ndsary
@section ndsary

@menu
* ndtext summary::              
* ndsary options::              
@end menu

@node ndtext summary
@subsection Summary
@code{ndsary} will search for text with help of Suffix Array utility
(@uref{http://sary.sourceforge.net/,sary}).  This is suitable for
large-sized text dictionary, but you will need suffix array index
to use it.

@node ndsary options
@subsection Supported Options
@code{ndsary} supports all all @code{ndtext} options except @code{:extension}.
Files are automatically located as they should have the extension
"@code{.ary}".

@node ndbuffer
@section ndbuffer

@menu
* ndbuffer summary::            
* ndbuffer options::            
@end menu

@node ndbuffer summary
@subsection Summary
@code{ndbuffer} is a search agent for text-based dictionary.  This
agent will keep the contents of dictionary inside buffer, so
searching speed is relatively fast, but it requires large memory.
Because this search agent do not require Unix tools such as
"grep", this search agent is suitable for Microsoft Windows
systems.

@node ndbuffer options
@subsection Supported Options
@code{ndbuffer} supports all @code{ndtext} options.

@node ndlatin
@section ndlatin
@code{ndlatin} is a search agent that lets you access @emph{WORDS for Latin}
by William Whitaker.  Requirements varies on various computers.

If you are using MacOS X, @emph{WORD for Latin} is included in
Open-Source software called @emph{Interpres.app}
(@uref{https://sites.google.com/site/erikandremendoza/}).  After the
installation of Interpres, add the following line in your set-up
file.  (Make sure that file does exist there and is executable.)
@lisp
(setq ndlatin-program "/Applications/Interpres.app/Contents/Resources/words")
(setq lookup-search-agents
      '(...
        (ndlatin)
        ...))
@end lisp

If you are using Windows or Linux, you may find the program via
Wikipedia (@uref{http://en.wikipedia.org/wiki/William_Whitaker%27s_Words})
page.

@node ndweb
@section ndweb
@code{ndweb} is a search agent for Web Resources which supports
OpenSearch protocol.  

To use this agent, you need to specify the URL for OpenSearch, as
follows.  Currently, only web services listed in
@code{ndweb-predefined-agents} are supported.
@lisp
(setq lookup-search-agents
      '(...
        (ndweb "http://www.google.com/")
        ...))
@end lisp

@node ndic
@section ndic
@code{ndic} is a search agent that lets you access @code{dic} format
dictionaries.

@node ndict
@section ndict
@code{ndic} is a search agent @code{DICT} server.  DICT protocols is
specified by @uref{http://tools.ietf.org/html/rfc2229,RFC2229}.

@node ndjitsuu
@section ndjitsuu

@menu
* Summary::                     
@end menu

@node Summary
@subsection Summary
@code{ndjitsuu} is a search agent for Jitsuu dictionary.  You will need
to prepare the index file equipped in this archive to create the
dictionary.

@node ndsrd
@section ndsrd
@verb{~ndsrd~} is an agent for "Shōgakukan Random House Dictionary".  To
use this agent, you must install
@uref{http://openlab.ring.gr.jp/edict/csrd/,@code{csrd}}.  There is a bug
in @code{csrd} program, which can be fixed by @verb{~csrd.c.diff.gz~}.

To use this search agent, you will need to install the @verb{~csrd~} program.
@example
cd csrd-1.0/
zcat ../csrd.c.diff.gz | patch -p0 (optional)
make -f makefile.unx
sudo mv csrd /usr/local/bin/

@end example
Then, add the following agent to your @verb{~lookup-search-agents~}.
@lisp
(setq lookup-search-agents
      '(...
        (ndsrd "/path/to/directory/")
        ...))
@end lisp
Refer the following URL for more details on this dictionary.
@table @samp
@item Shōgakukan Random House Dictionary
@uref{http://www.shogakukan.co.jp/books/detail/_isbn_4099068579}

@item csrd
@uref{http://openlab.ring.gr.jp/edict/csrd}

@item csrd patch
@uref{http://ikazuhiro.s206.xrea.com/filemgmt/index.php?id=10}

@end table

@node ndest
@section ndest
@code{ndest} search agent for
@uref{http://fallabs.com/hyperestraier/,HyperEstraier} Full-Text
Search engine.

@node ndmecab
@section ndmecab
@code{ndmecab} is a search agent for
@uref{http://mecab.googlecode.com/svn/trunk/mecab/doc/index.html,mecab}
program.

@node ndbtonic
@section ndbtonic
@code{ndbtonic} search agents support BTONIC format dictionaries.  To
use this agent, you must install
@uref{http://sary.sourceforge.net/,sary} program and
@uref{http://hp.vector.co.jp/authors/VA005784/btonic/btonic2xml.html,BTONIC2xml.rb
v1.10} utility.


@menu
* Usage::                       
@end menu

@node Usage
@subsection Usage
You need to convert original BTONIC data to XML data and create
suffix array index as follows.
@verbatim
% ruby -Ks BTONIC2xml.rb <dictName> <outDir>
% cd <outDir>
% mksary -c shift_jis <outFile>.xml
@end verbatim
Then put the agent into @code{lookup-search-agents} as follows.
@lisp
(setq lookup-search-agents
      '(...
        (ndbtonic "/path/to/directory/")
        ...))
@end lisp

@node ndspell
@section ndspell
@code{ndspell} let you search ambiguous spell.  You need either @code{ispell}
or @code{aspell} program to use this agent.

@node ndcookie
@section ndcookie
@code{ndcookie} is an fun agent which will randomly displays cookie
data.  To use this agent, you need to specify Emacs @code{etc} directory
where @code{COOKIES} file exists.
@lisp
(setq lookup-search-agents
      '(...
        (ndcookie "/path/to/emacs/etc/")
        ...))
@end lisp

@node List of Supported Dictionaries
@appendix List of Supported Dictionaries
This appendix contains various free and non-free dictionaries
supported by @emph{Lookup}, and also the @emph{support-files} that provides
dictionary options for some specific dictionaries.


@menu
* EPWING/EBXA dictionaries::    
* Text/XML dictionaries::       
@end menu

@node EPWING/EBXA dictionaries
@section EPWING/EBXA dictionaries
EPWING is a dictionary format specified as JIS X 4081.  There have
been a wide variety of commercial
@uref{http://ja.wikipedia.org/wiki/EPWING,EPWING} Dictionaries
available on the market.  However, most of them are discontinued.
EBXA is also a dictionary format which is a predecessor of EPWING
Format.


@menu
* FPWBooks::                    
* EPWING for classics::         
* LDOCE5-FPW::                  
@end menu

@node FPWBooks
@subsection FPWBooks
@uref{http://openlab.ring.gr.jp/edict/fpw/,FPWBooks} are the EPWING
dictionaries created by
@uref{http://www.sra.co.jp/people/m-kasahr/freepwing/,FREEPWING}.

@node EPWING for classics
@subsection EPWING for classics
@uref{http://classicalepwing.sourceforge.jp/,EPWING for classics}
are a collection of dictionaries for classical Latin, Greek and
Sanskrit.

@node LDOCE5-FPW
@subsection LDOCE5-FPW
@uref{http://www.geocities.jp/taka_depo/,LDOCE5-FPW} is a tool to
convert LDOCE5 DVD Dictionary to EPWING format.

@node Text/XML dictionaries
@section Text/XML dictionaries
Text or XML based dictionaries should be used with @code{ndsary},
@code{ndbuffer}, or @code{ndtext} agent.


@menu
* SDIC Dictionary::             
* RangJung Yeshe Dicitionary::  
@end menu

@node SDIC Dictionary
@subsection SDIC Dictionary
@code{support-sdic.el} provides support for
@uref{http://www.namazu.org/~tsuchiya/sdic/index.html,SDIC}
dictionaries.  

@node RangJung Yeshe Dicitionary
@subsection RangJung Yeshe Dicitionary

@node Making new Search Agents
@appendix Making new Search Agents
This section is to be written in future.

@node Making new Support Files
@appendix Making new Support Files
This section is to be written in future.

@node Concept index
@unnumbered Concept index


@printindex cp

@node Key index
@unnumbered Key index


@printindex ky

@node Command and function index
@unnumbered Command and function index


@printindex fn

@node Variable index
@unnumbered Variable index


@printindex vr

@c Generated by Org mode 7.9.3f in Emacs 24.2.92.1.

@bye
